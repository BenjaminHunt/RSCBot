import discord
import re
import ast
import random

from discord.ext import commands

class Match:
    """Used to get the match information"""

    CONFIG_COG = None

    def __init__(self, bot):
        self.bot = bot
        self.CONFIG_COG = self.bot.get_cog("TransactionConfiguration")

    @commands.command(pass_context=True)
    async def addMatches(self, ctx, matchInfo):
        matches = ast.literal_eval(matchInfo)
        for x in matches:
            await self.bot.say("Adding match: " + repr(x))
            await self._addMatch(ctx, *x)

    @commands.command(pass_context=True)
    async def teamList(self, ctx, teamName : str):
        roles = ctx.message.server.roles
        for role in roles:
            if role.name.lower().startswith(teamName.lower()):
                gm = None
                teamMembers = []
                for member in ctx.message.server.members:
                    if role in member.roles:
                        if self.CONFIG_COG.find_role_by_name(member.roles, "General Manager") is not None:
                            gm = member
                        else:
                            teamMembers.append(member)
                message = "```{0}:".format(role.name)
                if gm:
                    if gm.nick:
                        message += "\n{0} (GM".format(gm.nick)
                    else:
                        message += "\n{0} (GM".format(gm.name)
                    if self.CONFIG_COG.find_role_by_name(gm.roles, "Captain") is not None:
                        message += "|C)"
                    else:
                        message += ")"
                for member in teamMembers:
                    message += "\n{0}".format(member.nick)
                    if self.CONFIG_COG.find_role_by_name(member.roles, "Captain") is not None:
                        message += " (C)"
                message += "```"
                await self.bot.say(message)
                return
        await self.bot.say(":x: Could not match {0} to a role".format(teamName))

    @commands.command(pass_context=True)
    async def setMatchDay(self, ctx, day : int):
        """Sets the match day to the specified day. This match day is used when accessing the info in the !match command"""
        server_dict = self.CONFIG_COG.get_server_dict(ctx)
        
        try:
            server_dict.setdefault('Match Day', day)
            self.CONFIG_COG.save_data()
            await self.bot.say("Done")
        except:
            await self.bot.say(":x: Error trying to set the match day. Make sure that the transaction configuration cog is loaded")

    @commands.command(pass_context=True)
    async def getMatchDay(self, ctx):
        """Gets the transaction-log channel"""
        server_dict = self.CONFIG_COG.get_server_dict(ctx)
        
        try:
            day = server_dict["Match Day"]
            await self.bot.say("Match day set to: {0}".format(day))
        except:
            await self.bot.say(":x: Match day not set")

    async def _addMatch(self, ctx, matchDay, home, away, *args):
        """Adds a single match to the schedule.
        
        Arguments:
            ctx -- the bot context
            matchDay -- the matchDay to add the match to
            home -- the home team (must match the role name)
            away -- the away team (must match the role name)
            roomName -- (optional) the name for the RL match lobby, Autogenerated if not provided.
            roomPass -- (optional) the password for the match lobby. Autogenerated if not provided. 
        """

        # TODO: Consider checking the home and away role names and failing if they aren't valid
        #       Check whether either team has a match already, then either:
        #           - just fail [easy]
        #           - save the data temporarily and prompt to delete the other match(es) [harder]
        #       Other validation (like that matchDay is a number; that there aren't extra args) might be good too.
        formattedMatch = {
            'home': home,
            'away': away,
            'roomName': args[0] if len(args) > 0 else self._generateNamePass(),
            'roomPass': args[1] if len(args) > 1 else self._generateNamePass()
        }

        await self.bot.say("Match info for day " + repr(matchDay) + " is:\n  " + repr(formattedMatch))
        # server_dict = self.CONFIG_COG.get_server_dict(ctx)

        # try:
        #     matchDay = server_dict.setdefault('matchDays', {}).setdefault(matchDay, {})
        #     # TODO: Figure out how to store the match info so that we can tell if a team
        #     # Already has a match that day and fail appropriately.
        #     match = matchDay.setdefault([home, away], {})
        # except:
        #     await self.bot.say(":x: Error trying to add match data. Make sure the transactionConfiguration cog is loaded.")
    
    def _generateNamePass(self):
        # TODO: Load from file?
        set = ['foo', 'bar', 'baz', 'boom', 'bing', 'bop']
        return set[random.randrange(len(set))]

def setup(bot):
    bot.add_cog(Match(bot))